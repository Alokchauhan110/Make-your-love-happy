import logging
import os
import threading
from io import BytesIO

from flask import Flask
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

# --- Flask Web Server Setup ---
# This part is for Render's health checks.
app = Flask(__name__)

@app.route('/')
def hello():
    """A simple route to respond to Render's health checks."""
    return "Bot is alive!"

def run_flask():
    """Runs the Flask app."""
    # The host must be '0.0.0.0' to be accessible by Render
    # The port is obtained from the environment variable PORT, which Render sets.
    port = int(os.environ.get('PORT', 8080))
    app.run(host='0.0.0.0', port=port)
# -----------------------------


# --- Your Existing Bot Code (no changes needed here) ---

# The Base HTML Template
HTML_TEMPLATE = """
<!-- ... All your HTML and CSS code ... -->
"""
# (The full HTML_TEMPLATE string from the previous answer goes here)
HTML_TEMPLATE = """
<!-- Start of the beautiful blog post code - Generated by RexonBlood's Bot -->
<style>
    /* ... Full CSS from our final code ... */
    @import url('https://fonts.googleapis.com/css2?family=Dancing+Script:wght@700&family=Lato:wght@300;400&display=swap');.love-letter-container{font-family:'Lato',sans-serif;background:linear-gradient(135deg,#ffdde1,#ee9ca7);color:#333;padding:20px 10px;margin:-20px;overflow:hidden;position:relative}.falling-hearts{position:absolute;top:0;left:0;width:100%;height:100%;overflow:hidden;z-index:1}.heart{color:rgba(255,255,255,.6);font-size:24px;position:absolute;animation:fall 15s infinite linear}.heart:nth-child(1){left:10%;animation-delay:0s;font-size:20px}.heart:nth-child(2){left:20%;animation-delay:2s;animation-duration:12s}.heart:nth-child(3){left:30%;animation-delay:4s;font-size:18px}.heart:nth-child(4){left:40%;animation-delay:1s;animation-duration:18s}.heart:nth-child(5){left:50%;animation-delay:6s}.heart:nth-child(6){left:60%;animation-delay:8s;font-size:22px}.heart:nth-child(7){left:70%;animation-delay:3s;animation-duration:13s}.heart:nth-child(8){left:80%;animation-delay:5s;font-size:16px}.heart:nth-child(9){left:90%;animation-delay:7s}@keyframes fall{0%{top:-10%;transform:rotate(0)}100%{top:110%;transform:rotate(360deg)}}.love-letter-content{max-width:800px;margin:0 auto;padding:20px;background:rgba(255,255,255,.9);border-radius:15px;box-shadow:0 10px 30px rgba(0,0,0,.1);position:relative;z-index:3}@keyframes fadeInUp{from{opacity:0;transform:translateY(30px)}to{opacity:1;transform:translateY(0)}}@keyframes heartbeat{0%,100%{transform:scale(1)}50%{transform:scale(1.3)}}.animated{animation:fadeInUp 1s ease-out forwards;opacity:0}.character{position:fixed;bottom:0;height:150px;z-index:2;transition:left .2s ease-out,right .2s ease-out;pointer-events:none}.character img{height:100%;width:auto}#boy{left:5%}#girl{right:5%}.love-letter-header h1{font-family:'Dancing Script',cursive;font-size:3.5em;text-align:center;color:#d6336c;margin:0;line-height:1.2}.love-letter-header .heart-icon{color:#d6336c;font-size:1em;display:inline-block;animation:heartbeat 1.5s infinite ease-in-out}.intro-paragraph,.closing-message p{font-size:1.2em;line-height:1.6;text-align:center;padding:10px 20px}.divider{border:0;height:1px;background-image:linear-gradient(to right,rgba(214,51,108,0),rgba(214,51,108,.75),rgba(214,51,108,0));margin:40px 0}.memory-card{display:flex;align-items:center;background:#fff;margin-bottom:25px;border-radius:10px;box-shadow:0 5px 15px rgba(0,0,0,.05);padding:20px}.memory-card:nth-child(even){flex-direction:row-reverse}.memory-card img{width:150px;height:150px;border-radius:50%;object-fit:cover;border:4px solid #f8cdda;flex-shrink:0}.memory-text{padding:0 30px}.memory-text h3{font-family:'Dancing Script',cursive;color:#c2255c;font-size:2em;margin-bottom:5px}.reasons-list h2{text-align:center;font-family:'Dancing Script',cursive;font-size:2.5em;color:#d6336c;line-height:1.4}.reasons-list ul{list-style:none;padding:0;margin-top:20px}.reasons-list li{font-size:1.1em;margin-bottom:15px;display:flex;align-items:flex-start;line-height:1.5}.heart-bullet{color:#d6336c;margin-right:10px;font-size:1em}.love-letter-gallery h2{text-align:center;font-family:'Dancing Script',cursive;font-size:2.5em;color:#d6336c;line-height:1.3}.carousel{position:relative;width:100%;max-width:600px;margin:auto;overflow:hidden;border-radius:15px;box-shadow:0 8px 20px rgba(0,0,0,.1)}.carousel-track{display:flex;transition:transform .5s ease-in-out}.slide{min-width:100%;box-sizing:border-box}.slide img{width:100%;height:400px;object-fit:cover;display:block}.carousel-button{position:absolute;top:50%;transform:translateY(-50%);background-color:rgba(255,255,255,.7);border:none;font-size:2em;color:#d6336c;cursor:pointer;padding:0 15px;border-radius:50%;z-index:10;height:50px;width:50px;line-height:50px}.carousel-button:hover{background-color:#fff}.prev{left:10px}.next{right:10px}.play-button{background-color:#d6336c;color:#fff;border:none;padding:12px 25px;font-size:1em;font-family:'Lato',sans-serif;border-radius:50px;cursor:pointer;transition:background-color .3s,transform .2s;box-shadow:0 4px 15px rgba(214,51,108,.4)}.play-button:hover{background-color:#c2255c;transform:scale(1.05)}.surprise-box{text-align:center;margin-top:30px}#surprise-message{display:none;margin-top:20px;padding:20px;background:#fff5f7;border:1px dashed #ee9ca7;border-radius:10px;font-style:italic;color:#555}.countdown-timer h2{text-align:center;font-family:'Dancing Script',cursive;font-size:2.5em;color:#d6336c;margin-bottom:20px}#countdown-display{display:grid;grid-template-columns:repeat(4,1fr);justify-content:center;text-align:center;gap:10px}.countdown-block{background:#fff5f7;padding:10px;border-radius:8px;box-shadow:0 2px 5px rgba(0,0,0,.05)}.countdown-block span{font-size:2em;color:#c2255c;font-weight:700}.countdown-block p{font-size:.8em;margin:0;color:#888;text-transform:uppercase;letter-spacing:.5px}.closing-message h2{font-family:'Dancing Script',cursive;font-size:3em;color:#d6336c;text-align:center;margin-bottom:20px;line-height:1.4}@media (max-width:768px){.character{height:100px}.love-letter-header h1{font-size:2.5em}.memory-card,.memory-card:nth-child(even){flex-direction:column;text-align:center}.memory-card img{margin-bottom:15px}.memory-text{padding:0}.slide img{height:300px}.closing-message h2,.reasons-list h2,.countdown-timer h2,.love-letter-gallery h2{font-size:2.2em}.memory-text h3{font-size:1.8em}.countdown-block span{font-size:1.5em}.countdown-block p{font-size:.7em}}
</style>
<div class="love-letter-container">
    <div class="falling-hearts"><div class="heart">♥</div><div class="heart">❤</div><div class="heart">♥</div><div class="heart">❤</div><div class="heart">♥</div><div class="heart">❤</div><div class="heart">♥</div><div class="heart">❤</div><div class="heart">♥</div></div>
    <div id="boy" class="character"><img src="https://i.postimg.cc/PJG4m80T/1000036238-removebg-preview.png" alt="Boy silhouette"></div>
    <div id="girl" class="character"><img src="https://i.postimg.cc/3WMjBRYH/1000036239-removebg-preview.png" alt="Girl silhouette"></div>
    <div class="love-letter-content">
        <header class="love-letter-header animated"><h1>To My Dearest {girlfriend_name} <span class="heart-icon">♥</span></h1></header>
        <p class="intro-paragraph animated">{intro_message}</p>
        <div class="animated" style="text-align:center; margin: 20px 0;"><audio id="romance-song" src="{song_url}"></audio><button id="play-button" class="play-button">Play Our Song</button></div>
        <hr class="divider animated">
        <div class="memory-card animated"><img src="{memory1_photo}" alt="A meaningful photo"><div class="memory-text"><h3>{memory1_title}</h3><p>{memory1_desc}</p></div></div>
        <div class="memory-card animated"><img src="{memory2_photo}" alt="A photo from a fun trip"><div class="memory-text"><h3>{memory2_title}</h3><p>{memory2_desc}</p></div></div>
        <hr class="divider animated">
        <div class="love-letter-gallery animated"><h2>Our Favorite Moments</h2><div class="carousel"><div class="carousel-track"><div class="slide"><img src="{gallery_photo1}" alt="Gallery Photo 1"></div><div class="slide"><img src="{gallery_photo2}" alt="Gallery Photo 2"></div><div class="slide"><img src="{gallery_photo3}" alt="Gallery Photo 3"></div><div class="slide"><img src="{gallery_photo4}" alt="Gallery Photo 4"></div><div class="slide"><img src="{gallery_photo5}" alt="Gallery Photo 5"></div><div class="slide"><img src="{gallery_photo6}" alt="Gallery Photo 6"></div></div><button class="carousel-button prev">‹</button><button class="carousel-button next">›</button></div></div>
        <hr class="divider animated">
        <div class="countdown-timer animated"><h2>Countdown to {countdown_occasion}</h2><div id="countdown-display"><div class="countdown-block"><span id="days">0</span><p>Days</p></div><div class="countdown-block"><span id="hours">0</span><p>Hours</p></div><div class="countdown-block"><span id="minutes">0</span><p>Minutes</p></div><div class="countdown-block"><span id="seconds">0</span><p>Seconds</p></div></div></div>
        <hr class="divider animated">
        <div class="closing-message animated"><h2>{final_heading}</h2><p>{final_message}<br><br>Forever yours,<br><span style="font-family: 'Dancing Script', cursive; font-size: 1.5em;">{user_name}</span></p></div>
    </div>
    <script>
        const song=document.getElementById("romance-song"),playButton=document.getElementById("play-button");playButton.addEventListener("click",()=>{song.paused?(song.play(),playButton.textContent="Pause Song"):(song.pause(),playButton.textContent="Play Our Song")});const countdownDate=new Date("{countdown_date}T00:00:00").getTime(),countdownFunction=setInterval(()=>{const e=(new Date).getTime(),t=countdownDate-e;document.getElementById("days").innerText=Math.floor(t/864e5),document.getElementById("hours").innerText=Math.floor(t%864e5/36e5),document.getElementById("minutes").innerText=Math.floor(t%36e5/6e4),document.getElementById("seconds").innerText=Math.floor(t%6e4/1e3),t<0&&(clearInterval(countdownFunction),document.getElementById("countdown-display").innerHTML="<p style='font-size:1.5em; color:#d6336c;'>The special day is here!</p>")},1e3);const track=document.querySelector(".carousel-track"),slides=Array.from(track.children),nextButton=document.querySelector(".next"),prevButton=document.querySelector(".prev");nextButton.addEventListener("click",()=>{const e=track.querySelector(".current-slide")||slides[0];let t=e.nextElementSibling;t||(t=slides[0]),track.style.transform="translateX(-"+t.getBoundingClientRect().width*slides.indexOf(t)+"px)",e.classList.remove("current-slide"),t.classList.add("current-slide")}),prevButton.addEventListener("click",()=>{const e=track.querySelector(".current-slide")||slides[0];let t=e.previousElementSibling;t||(t=slides[slides.length-1]),track.style.transform="translateX(-"+t.getBoundingClientRect().width*slides.indexOf(t)+"px)",e.classList.remove("current-slide"),t.classList.add("current-slide")});const boy=document.getElementById("boy"),girl=document.getElementById("girl");window.addEventListener("scroll",()=>{const e=document.documentElement.scrollHeight-window.innerHeight;if(e<=0)return;const t=Math.min(1,Math.max(0,window.scrollY/e)),n=5+37*t;boy.style.left=n+"%",girl.style.right=n+"%"});
    </script>
</div>
"""

# Enable logging and define states
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

(
    GET_GF_NAME, GET_USER_NAME, GET_INTRO, GET_SONG, GET_MEMORY1_PHOTO,
    GET_MEMORY1_TITLE, GET_MEMORY1_DESC, GET_MEMORY2_PHOTO,
    GET_MEMORY2_TITLE, GET_MEMORY2_DESC, GET_GALLERY_1, GET_GALLERY_2,
    GET_GALLERY_3, GET_GALLERY_4, GET_GALLERY_5, GET_GALLERY_6,
    GET_COUNTDOWN_OCCASION, GET_COUNTDOWN_DATE, GET_FINAL_HEADING, GET_FINAL_MESSAGE
) = range(20)

# Helper function
async def ask_next_question(update: Update, context: ContextTypes.DEFAULT_TYPE, question, next_state):
    await update.message.reply_text(question, parse_mode='Markdown')
    return next_state

# --- All your conversation functions (start, create, get_gf_name, etc.) go here ---
# --- They are exactly the same as the previous version. Hidden for brevity. ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE): return ConversationHandler.END # Placeholder
async def create(update: Update, context: ContextTypes.DEFAULT_TYPE): # Placeholder
    context.user_data.clear()
    return await ask_next_question(update, context, "Let's begin! What is your partner's name?", GET_GF_NAME)
async def get_gf_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['girlfriend_name'] = update.message.text
    return await ask_next_question(update, context, "Lovely! Now, what is your name or nickname?", GET_USER_NAME)
# ... all other `get_...` functions from the previous answer
async def get_user_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['user_name'] = update.message.text
    return await ask_next_question(update, context, "Perfect. What short introductory message would you like to write?", GET_INTRO)
async def get_intro(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['intro_message'] = update.message.text
    return await ask_next_question(update, context, "Great. Now, please provide a direct URL to a song (`.mp3` format).\n\n*Tip: Upload your song to [archive.org](https://archive.org) to get a direct link.*", GET_SONG)
async def get_song(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['song_url'] = update.message.text
    return await ask_next_question(update, context, "Now for your memories! First, send a direct photo URL for your first memory.\n\n*Tip: Upload photos to [postimages.org](https://postimages.org) and use the 'Direct link'.*", GET_MEMORY1_PHOTO)
async def get_memory1_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['memory1_photo'] = update.message.text
    return await ask_next_question(update, context, "What is the title for this memory (e.g., 'The Day We Met')?", GET_MEMORY1_TITLE)
async def get_memory1_title(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['memory1_title'] = update.message.text
    return await ask_next_question(update, context, "And a short description for this memory?", GET_MEMORY1_DESC)
async def get_memory1_desc(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['memory1_desc'] = update.message.text
    return await ask_next_question(update, context, "Great! Now, a photo URL for your second memory.", GET_MEMORY2_PHOTO)
async def get_memory2_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['memory2_photo'] = update.message.text
    return await ask_next_question(update, context, "What's the title for this second memory?", GET_MEMORY2_TITLE)
async def get_memory2_title(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['memory2_title'] = update.message.text
    return await ask_next_question(update, context, "And the description for it?", GET_MEMORY2_DESC)
async def get_memory2_desc(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['memory2_desc'] = update.message.text
    return await ask_next_question(update, context, "Time for the photo gallery! Send the link for Gallery Photo 1.", GET_GALLERY_1)
async def get_gallery_1(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['gallery_photo1'] = update.message.text
    return await ask_next_question(update, context, "Photo 2?", GET_GALLERY_2)
async def get_gallery_2(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['gallery_photo2'] = update.message.text
    return await ask_next_question(update, context, "Photo 3?", GET_GALLERY_3)
async def get_gallery_3(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['gallery_photo3'] = update.message.text
    return await ask_next_question(update, context, "Photo 4?", GET_GALLERY_4)
async def get_gallery_4(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['gallery_photo4'] = update.message.text
    return await ask_next_question(update, context, "Photo 5?", GET_GALLERY_5)
async def get_gallery_5(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['gallery_photo5'] = update.message.text
    return await ask_next_question(update, context, "And the last one, Photo 6?", GET_GALLERY_6)
async def get_gallery_6(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['gallery_photo6'] = update.message.text
    return await ask_next_question(update, context, "We're almost done! What is the special occasion for the countdown? (e.g., 'Our Anniversary', 'Your Birthday')", GET_COUNTDOWN_OCCASION)
async def get_countdown_occasion(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['countdown_occasion'] = update.message.text
    return await ask_next_question(update, context, "What is the date for this occasion? (Format: YYYY-MM-DD)", GET_COUNTDOWN_DATE)
async def get_countdown_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['countdown_date'] = update.message.text
    return await ask_next_question(update, context, "What should the final big heading say? (e.g., 'You are my everything')", GET_FINAL_HEADING)
async def get_final_heading(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['final_heading'] = update.message.text
    return await ask_next_question(update, context, "And the final closing message?", GET_FINAL_MESSAGE)
async def get_final_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['final_message'] = update.message.text
    await update.message.reply_text("Perfect! All data collected. Generating your custom HTML file now...")
    final_html = HTML_TEMPLATE.format(**context.user_data)
    html_file = BytesIO(final_html.encode('utf-8'))
    html_file.name = 'love_letter.html'
    await update.message.reply_document(
        document=html_file,
        caption="✨ **Your beautiful webpage code is ready!** ✨\n\n"
                "**Instructions:**\n"
                "1. Open this file on a computer.\n"
                "2. Copy ALL the text inside.\n"
                "3. Go to Blogspot, create a new post, switch to **HTML View**, and paste it in.\n\n"
                "Type /create to make another one.",
        parse_mode='Markdown'
    )
    context.user_data.clear()
    return ConversationHandler.END
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE): return ConversationHandler.END # Placeholder


def run_bot() -> None:
    """This function sets up and runs the Telegram bot."""
    token = os.environ.get("TELEGRAM_TOKEN")
    if not token:
        logger.error("Error: TELEGRAM_TOKEN environment variable not set.")
        return

    application = Application.builder().token(token).build()

    # Conversation handler setup (same as before)
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("create", create)],
        states={
            GET_GF_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_gf_name)],
            GET_USER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_user_name)],
            GET_INTRO: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_intro)],
            GET_SONG: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_song)],
            GET_MEMORY1_PHOTO: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_memory1_photo)],
            GET_MEMORY1_TITLE